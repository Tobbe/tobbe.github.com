{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/dev-ops","result":{"pageContext":{"posts":[{"excerpt":"This is a guide on how to self host a Redwood project using Dokku. Some familiarity with Linux and the command line is required. If you're just getting started with Redwood and want something easy and free I recommend deploying to Netlify or Vercel‚Ä¶","html":"<p>This is a guide on how to self host a Redwood project using <a href=\"https://dokku.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dokku</a>. Some familiarity with Linux and the command line is required. If you're just getting started with Redwood and want something easy and free I recommend deploying to <a href=\"https://netlify.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Netlify</a> or <a href=\"https://vercel.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vercel</a>, both of which have first-class Redwood support.</p>\n<p>If you don't know what Dokku is, the short version is that it's like a self-hosted version of Heroku. It uses the same buildpacks, procfiles and deployment process as Heroku. There are other, more advanced, options as well, if the Heroku stuff is too limiting for you, but I won't go into that here. Since it's like Heroku, that also means you could host your database in Dokku if you wanted. But that's also not covered by this guide.</p>\n<p>A big shoutout to <a href=\"https://www.brentjanderson.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Brent Anderson</a> for his <a href=\"https://gist.github.com/brentjanderson/dcb59c46023c67c44eb12492b038ff84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a> on getting RW running on Heroku. I could not have written this guide without that gist.</p>\n<p>Beware that it's you, yourself, who is responsible for keeping your server secure and up-to-date. You have to figure out backups. What do you do if your page becomes super popular? How do you handle scaling? There are a thousand and one reasons to <strong>not</strong> self-host. <a href=\"https://begin.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Begin</a> has a whole page dedicated to why you shouldn't do it. It's a pretty fun, and eye-opening read. Have a look: <a href=\"https://begin.com/learn/shit-youre-not-doing-with-begin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://begin.com/learn/shit-youre-not-doing-with-begin</a></p>\n<p>With that out of the way: let's get started!</p>\n<p>To follow along you'll need an Ubuntu 20.04 box (or a recent version of Debian) where you have root access. The server needs to have at least 1 GB of RAM. You'll also need a domain you can configure DNS for. And finally, a suitable Redwood project to deploy. I have a small cloud server at <a href=\"https://www.hetzner.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hetzner</a> and a domain that I bought through <a href=\"https://porkbun.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Porkbun</a>. If you have a DigitalOcean droplet cloud server, or a Microsoft Azure server there are specific guides on Dokku's web page <a href=\"https://dokku.com/docs/getting-started/install/digitalocean/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1</a> <a href=\"https://dokku.com/docs/getting-started/install/azure/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2</a></p>\n<p>First thing to do is configure your domain to point to the IP address of your server (you need a wildcard record). Make sure it's working by SSHing into your server. If this is a freshly installed OS, create a new user (do <strong>not</strong> name it \"dokku\") and make sure it's allowed to use the <code class=\"language-text\">sudo</code> command. From now on, use this user to execute all commands.</p>\n<p>Install Dokku</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">wget https://raw.githubusercontent.com/dokku/dokku/v0.24.3/bootstrap.sh\nsudo DOKKU_TAG=v0.24.3 bash bootstrap.sh</code></pre></div>\n<p>Go to yourdomain.com and finish the setup in your browser.</p>\n<p>Create a new Dokku application (replace <code class=\"language-text\">my-redwood-app</code> with the actual name of your app).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dokku apps:create my-redwood-app</code></pre></div>\n<p>If you have a database connected to your app you'll want to set the <code class=\"language-text\">DATABASE_URL</code> environment variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dokku config:set my-redwood-app DATABASE_URL=postgresql://asldfjsldf</code></pre></div>\n<p>Now it's time to prepare your Redwood app for deploying to Dokku. You need to do two things:</p>\n<ol>\n<li>Set <code class=\"language-text\">apiProxyPath = &quot;/api&quot;</code> in redwood.toml</li>\n<li>\n<p>Create a new file in the root of your project called <code class=\"language-text\">.buildpacks</code>. Add this content to that file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://github.com/tobbe/dokku-buildpack-redwood-init.git\nhttps://github.com/heroku/heroku-buildpack-nodejs.git\nhttps://github.com/heroku/heroku-buildpack-nginx.git\nhttps://github.com/tobbe/dokku-buildpack-redwood-finish.git</code></pre></div>\n</li>\n</ol>\n<p>Now your app is ready. For the next step you'll need to have an ssh agent running, with your key loaded. If you're on Windows you might have to do this manually. These two commands worked for me in git-bash.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eval `ssh-agent -s`\nssh-add ~/.ssh/id_rsa</code></pre></div>\n<p>Now you can add dokku as a new remote to git, and push to deploy! üöÄ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git remote add dokku dokku@yourdomain.com:my-redwood-app\ngit push dokku main</code></pre></div>\n<p>This will take a few minutes as it downloads and installs node.js, nginx, redwood and your other project dependencies etc. But in the end, when it's ready, you should be able to go to my-redwood-app.yourdomain.com and see your site live in your browser!</p>\n<p>If you made it this far, and it works, congratulations! üéâüèÅ</p>\n<p>I bet a few of you who read this wonder what those github hosted buildpacks do that we added to the <code class=\"language-text\">.buildpacks</code> file. The first one is written by me, and it adds a few files to your Redwood app. Then we add nodejs and nginx. One of the files added in the first step is a config file for nginx. That's why the \"redwood-init\" buildpack needs to run first. Finally there's another Redwood specific buildpack that installs a few needed packages, builds Redwood and finally starts nginx and Redwood's api server.</p>\n<p>üîí Now that your Redwood app is live, I highly recommend setting up SSL for it, to make it more secure. I'm just going to link to <a href=\"https://dokku.com/docs/deployment/application-deployment/#setting-up-ssl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dokku's SSL guide</a>. It's really easy to get Let's Encrypt setup.</p>\n<p><span style=\"font-size: 80%\">(Header photo by <a href=\"https://unsplash.com/@some_random_guy?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Alex Duffy</a> on <a href=\"https://unsplash.com/s/photos/docks-containers?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>)</span></p>","id":"9ab09931-ae8d-5b73-9163-b5fa4e2cba0a","fields":{"slug":"/2021-03-29/redwoodjs-dokku-deploy/"},"frontmatter":{"date":"2021-03-29","title":"Deploying a RedwoodJS app on Dokku","category":"RedwoodJS","tags":["RedwoodJS","Dokku","DevOps","Hosting"],"banner":"/assets/bg/docks.jpg"},"timeToRead":4},{"excerpt":"Recently I had to download files from a RedwoodJS Function (AWS Lambda serverless function). The files contained sensitive information, so I needed to host them somewhere where I could control who could download them. Easiest for me was to put them‚Ä¶","html":"<p>Recently I had to download files from a RedwoodJS Function (AWS Lambda serverless function). The files contained sensitive information, so I needed to host them somewhere where I could control who could download them. Easiest for me was to put them in an Amazon AWS S3 Bucket, and then create an IAM policy to give a single user read-only access to the files.</p>\n<p>Here's a step-by-step guide or tutorial on how I did it.</p>\n<h2 id=\"aws-s3-bucket\" style=\"position:relative;\"><a href=\"#aws-s3-bucket\" aria-label=\"aws s3 bucket permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS S3 Bucket</h2>\n<p>The first step is going to be to set up our storage. Go to <a href=\"https://aws.amazon.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aws.amazon.com/</a> and sign in to the AWS Management Console (or create an account if you don't have one already).</p>\n<p><img src=\"/assets/aws_signin.png\" alt=\"Screenshot of AWS Management drop-down item and signup button\" title=\"aws signin/signup screenshot\"></p>\n<p>Choose to sign in as \"Root user\" and then you'll find S3 under \"Storage\" to the left. Here's a direct link that you might be able to use <a href=\"https://s3.console.aws.amazon.com/s3/home?region=us-east-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://s3.console.aws.amazon.com/s3/home?region=us-east-1</a>. Click \"Create bucket\" and give it a unique name. All other options can be left with their default values, so just scroll down and click \"Create bucket\"</p>\n<p><img src=\"/assets/aws_new_bucket.png\" alt=\"Truncated screenshot showing creation of new bucket\" title=\"aws new bucket\"></p>\n<p>Now that you have a new bucket created, it's time to set up a user with a policy that lets it access the files in the bucket. In the upper left corner of the screen you click on \"Services\" and then you can search for \"iam\" and click the first and only result to go to \"Identity and Access Management\". </p>\n<p><img src=\"/assets/aws_services_iam.png\" alt=\"Screenshot showing the menu option to got to IAM\" title=\"menu to go to iam\"></p>\n<p>Click \"Policies\" in the left menu and then the blue \"Create policy\" button up top.</p>\n<p><img src=\"/assets/aws_create_policy_button.png\" alt=\"Screenshot of blue Create policy button\" title=\"create policy button\"></p>\n<p>When creating your new policy you should select the \"S3\" service, choose the \"GetObject\" Read action, add the ARN (Amazon Resource Name) for the files you want to give access to by typing in the name of your newly created bucket and clicking \"Any\" on the object name to allow access to all files in the bucket, and finally you can leave the \"Request conditions\" as it is.</p>\n<p>This is what it looked like for me when I created the policy</p>\n<p><img src=\"/assets/aws_visual_policy.png\" alt=\"Screenshot of visual policy editor\" title=\"visual policy editor\"></p>\n<p>Click \"Review policy\" (bottom right), give your policy a name, like \"example-secure-bucket-tlundberg-com-policy\" and finally click the blue \"Create policy\" button.</p>\n<p>Now, with the policy created, we'll go ahead and create a user that we'll connect this policy to. So click \"Users\" in the left menu and the the blue \"Add user\" button. Give the user a name, like \"example-secure-bucket-tlundberg-com-user\" and select the \"Programatic access\" access type. This will let you use this user with the AWS SDK and APIs.</p>\n<p><img src=\"/assets/aws_new_user.png\" alt=\"New user screenshot\" title=\"new user\"></p>\n<p>Now click \"Next: Permissions\", and on the new page you chose \"Attach existing policies directly\" (it's the last box in the row up top). Filter the list of policies to find the one you created previously and click the checkbox next to it.</p>\n<p><img src=\"/assets/aws_new_user_policy.png\" alt=\"New user policy screenshot\" title=\"new user policy\"></p>\n<p>This was the last step where we had to do anything, so just click \"Next: Tags\", \"Next: Review\" and finally \"Create user\".</p>\n<p>Now it's important you save the secret access key for this user, because you will not be able to find it again. Either download the .csv file, or copy/paste the values to somewhere safe. After you've saved the credentials you can close the \"Add user\" wizard. Should you lose the Access key ID and/or the Access Secret you can come back here to generate new ones.</p>\n<p>You're finally done with AWS and it's time to move on to RedwoodJS stuff.</p>\n<h2 id=\"redwoodjs-function\" style=\"position:relative;\"><a href=\"#redwoodjs-function\" aria-label=\"redwoodjs function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RedwoodJS Function</h2>\n<p>Create a new Redwood project if you don't have one already, and add a new file in <code class=\"language-text\">api/src/functions/</code>. I called mine <code class=\"language-text\">s3download.js</code>. Add this code to the file</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>S3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    accessKeyId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_KEY_ID</span><span class=\"token punctuation\">,</span>\n    secretAccessKey<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_SECRET</span><span class=\"token punctuation\">,</span>\n    region<span class=\"token operator\">:</span> <span class=\"token string\">'us-east-1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> s3Result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> s3\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        Bucket<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_BUCKET</span><span class=\"token punctuation\">,</span>\n        Key<span class=\"token operator\">:</span> <span class=\"token string\">'my_s3_file.txt'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> s3File <span class=\"token operator\">=</span> s3Result<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file contents'</span><span class=\"token punctuation\">,</span> s3File<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">'File downloaded successfully'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have to install the <code class=\"language-text\">aws-sdk</code> package to use this function. Do that by running <code class=\"language-text\">yarn workspace api add aws-sdk</code>.</p>\n<p>As you can see the function uses three environment variables. Under no circumstances should you put your bucket credential directly in your source code, because it will (probably) be pushed to GitHub, where other people could see it. Even if it's a private repo it's just yet anohter place your credentials could be compromised. So instead we use environment variables. Let's add them to the <code class=\"language-text\">.env</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">S3_KEY_ID=KYSA9EKSDFHCK88194UK\nS3_SECRET=dsli5lsi92klsjdf120sdfGsiSDDKSKS3sdflkjS\nS3_BUCKET=example-secure-bucket-tlundberg-com</code></pre></div>\n<p>Those are just made-up values to show you what it should look like, use your values instead. Also make sure the <code class=\"language-text\">region</code> in the code matches the region you have your bucket in.</p>\n<p>Before we can test this we need to upload the <code class=\"language-text\">my_s3_file.txt</code> file to the s3 bucket. Easiest is to just drag-and-drop it in the AWS web interface. So go ahead and do that. </p>\n<p>It's finally time to try it all out! Run <code class=\"language-text\">yarn rw dev</code> and you should be able to access your function at <a href=\"http://localhost:8911/s3download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8911/s3download</a>. You should see the message \"File downloaded successfully\" in your browser, and if you switch over to your console you should see the content of the file.</p>\n<p>Did it work? Congratulations! All the AWS setup is not easy. Thankfully it's pretty easy to use the SDK once everything is set up correctly. </p>\n<p>Thanks for reading! </p>\n<p><span style=\"font-size: 80%\">(Header photo by <a href=\"https://unsplash.com/@jdjohnston?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jessica Johnston</a> on <a href=\"https://unsplash.com/s/photos/buckets?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</span></p>","id":"0833c517-1be6-5b8f-949c-dd07064a0312","fields":{"slug":"/2020-11-28/redwood-download-files-from-protected-s3/"},"frontmatter":{"date":"2020-11-28","title":"Using RedwoodJS to download protected files from an Amazon S3 bucket","category":"RedwoodJS","tags":["RedwoodJS","JavaScript","Amazon","AWS","S3","DevOps","Security"],"banner":"/assets/bg/buckets.jpg"},"timeToRead":4}],"tagName":"DevOps"}}}