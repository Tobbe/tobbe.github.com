{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/prisma","result":{"pageContext":{"posts":[{"excerpt":"This tutorial will show you one way to implement pagination in an app built using RedwoodJS. It builds ontop of the official RedwoodJS tutorial and I'll assume you have a folder with the code from the tutorial that you can continue working on. (Ifâ€¦","html":"<p>This tutorial will show you one way to implement pagination in an app built using RedwoodJS. It builds ontop of <a href=\"https://redwoodjs.com/tutorial/welcome-to-redwood\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the official RedwoodJS tutorial</a> and I'll assume you have a folder with the code from the tutorial that you can continue working on. (If you don't, you can clone this repo: <a href=\"https://github.com/thedavidprice/redwood-tutorial-test\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/thedavidprice/redwood-tutorial-test</a>)</p>\n<p><img src=\"/assets/redwood_pagination.png\" alt=\"Screenshot of pagination\" title=\"pagination screenshot\"></p>\n<p>The screenshot above shows what we're building. See the pagination at the bottom? The styling is up to you to fix.</p>\n<p>So you have a blog, and probably only a few short posts. But as the blog grows bigger you'll soon need to paginate all your posts. So, go ahead and create a bunch of posts to make this pagination worthwhile. We'll display five posts per page, so begin with creating at least six posts, to get two pages.</p>\n<p>We'll begin by updating the SDL. To our Query type a new query is added to get just a single page of posts. We'll pass in the page we want, and when returning the result we'll also include the total number of posts as that'll be needed when building our pagination component.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token comment\"># api/src/graphql/posts.sdl.js</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PostPage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Post<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">count</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">postPage</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">page</span><span class=\"token punctuation\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> PostPage\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Post<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">post</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Post<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You might have noticed that we made the page optional. That's because we want to be able to default to the first page if no page is provided.</p>\n<p>Now we need to add a resolver for this new query to our posts service.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// api/src/services/posts/posts.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS_PER_PAGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">postPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">POSTS_PER_PAGE</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token operator\">:</span> db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">findMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      take<span class=\"token operator\">:</span> <span class=\"token constant\">POSTS_PER_PAGE</span><span class=\"token punctuation\">,</span>\n      skip<span class=\"token operator\">:</span> offset<span class=\"token punctuation\">,</span>\n      orderBy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> createdAt<span class=\"token operator\">:</span> <span class=\"token string\">'desc'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    count<span class=\"token operator\">:</span> db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now we can make a GraphQL request (using <a href=\"https://www.apollographql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo</a>) for a specific page of our blog posts. And the resolver we just updated will use <a href=\"https://www.prisma.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prisma</a> to fetch the correct posts from our database.</p>\n<p>With these updates to the API side of things done, it's time to move over to the web side. It's the BlogPostsCell component that makes the gql query to display the list of blog posts on the HomePage of the blog, so let's update that query. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">QUERY</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query BlogPostsQuery($page: Int) {\n    postPage(page: $page) {\n      posts {\n        id\n        title\n        body\n        createdAt\n      }\n      count\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>The <code class=\"language-text\">Success</code> component in the same file also needs a bit of an update to handle the new gql query result structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Success</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> postPage <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> postPage<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>BlogPost key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we need a way to pass a value for the <code class=\"language-text\">page</code> parameter to the query. To do that we'll take advantage of a little RedwoodJS magic. Remember from the tutorial how you made the post id part of the route path (<code class=\"language-text\">&lt;Route path=&quot;/blog-post/{id:Int}&quot; page={BlogPostPage} name=&quot;blogPost&quot; /&gt;</code>) and that id was then sent as a prop to the BlogPostPage component? We'll do something similar here for the page number, but instead of making it a part of the url path, we'll make it a url query string. These, too, are magically passed as a prop to the relevant page component. And you don't even have to update the route to make it work! Let's update <code class=\"language-text\">HomePage.js</code> to handle the prop.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/pages/HomePage/HomePage.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HomePage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>BlogLayout<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>BlogPostsCell page<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BlogLayout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now if someone navigates to <a href=\"https://awesomeredwoodjsblog.com?page=2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://awesomeredwoodjsblog.com?page=2</a> (and the blog was actually hosted on awesomeredwoodjsblog.com), then <code class=\"language-text\">HomePage</code> would have its <code class=\"language-text\">page</code> prop set to <code class=\"language-text\">&quot;2&quot;</code>, and we then pass that value along to <code class=\"language-text\">BlogPostsCell</code>. If no <code class=\"language-text\">?page=</code> query parameter is provided <code class=\"language-text\">page</code> will default to <code class=\"language-text\">1</code></p>\n<p>Going back to <code class=\"language-text\">BlogPostsCell</code> there is one me thing to add before the query parameter work.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">beforeQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  page <span class=\"token operator\">=</span> page <span class=\"token operator\">?</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The query parameter is passed to the component as a string, so we need to parse it into a number.</p>\n<p>If you run the project with <code class=\"language-text\">yarn rw dev</code> on the default port 8910 you can now go to <a href=\"http://localhost:8910\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8910</a> and you should only see the first five posts. Change the URL to <a href=\"http://localhost:8910?page=2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8910?page=2</a> and you should see the next five posts (if you have that many, if you only have six posts total you should now see just one post).</p>\n<p>The final thing to add is a page selector, or pagination component, to the end of the list of posts to be able to click and jump between the different pages.</p>\n<p>Generate a new component with <code class=\"language-text\">yarn rw g component Pagination</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/Pagination/Pagination.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link<span class=\"token punctuation\">,</span> routes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@redwoodjs/router'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS_PER_PAGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Pagination</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">/</span> <span class=\"token constant\">POSTS_PER_PAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> page<span class=\"token operator\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Pagination<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Pagination</code></pre></div>\n<p>Keeping with the theme of the official RedwoodJS tutorial we're not adding any css, but if you wanted the pagination to look a little nicer it'd be easy to remove the bullets from that list, and make it horizontal instead of vertical.</p>\n<p>Finally let's add this new component to the end of <code class=\"language-text\">BlogPostsCell</code>. Don't forget to <code class=\"language-text\">import</code> it at the top as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">import</span> Pagination <span class=\"token keyword\">from</span> <span class=\"token string\">'src/components/Pagination'</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Success</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> postPage <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>postPage<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>BlogPost key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token operator\">&lt;</span>Pagination count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>postPage<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And there you have it! You have now added a functioning, but somewhat ugly, pagination to your redwood blog. One techincal limitation to the current implementation is that it doesn't handle too many pages very gracefully. Just imagine what that list of pages would look like if you had 100 pages! I'll write another blog post in the future with a more fully featured pagination component. </p>\n<p>Most of the code in this tutorial was copy/pasted from the <a href=\"https://github.com/redwoodjs/example-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"Hammer Blog\" RedwoodJS example</a></p>\n<p>If you want to learn more about pagination with Prisma and Apollo they both have excelent docs on the topic. <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/pagination\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/pagination</a> <a href=\"https://www.apollographql.com/docs/react/data/pagination/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.apollographql.com/docs/react/data/pagination/</a></p>","id":"07e4e2dd-7d47-5e82-ba05-e90ea4d6ad96","fields":{"slug":"/2020-09-16/redwood-pagination-tutorial/"},"frontmatter":{"date":"2020-09-15","title":"Redwood Pagination Tutorial","category":"RedwoodJS","tags":["RedwoodJS","GraphQL","Prisma","Coding","JavaScript"],"banner":"/assets/bg/5.jpg"},"timeToRead":5}],"tagName":"Prisma"}}}