{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2021-01-18/redwood-switch-to-another-graphql-client/","result":{"data":{"markdownRemark":{"html":"<p>RedwoodJS ships with Apollo Client as its default GraphQL client. With the 0.22.0 release of Redwood it's now possible to use another GraphQL client if you want. The key is the new <code class=\"language-text\">&lt;GraphQLHooksProvider&gt;</code> component where you can plug in whatever <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> hooks you want, as long as they have the correct function signature.</p>\n<p>By default when you create a new RedwoodJS app this is what you get in your <code class=\"language-text\">index.js</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FatalErrorBoundary</span></span> <span class=\"token attr-name\">page</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>FatalErrorPage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>netlifyIdentity<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>netlify<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RedwoodProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Routes</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RedwoodProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AuthProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FatalErrorBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redwood-app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The interesting bit is <code class=\"language-text\">&lt;RedwoodProvider&gt;</code>. Looking at the source for Redwood we see this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> RedwoodApolloProvider <span class=\"token keyword\">as</span> RedwoodProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/RedwoodApolloProvider'</span></code></pre></div>\n<p>and this:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  ApolloProvider<span class=\"token punctuation\">,</span>\n  ApolloClientOptions<span class=\"token punctuation\">,</span>\n  ApolloClient<span class=\"token punctuation\">,</span>\n  InMemoryCache<span class=\"token punctuation\">,</span>\n  useQuery<span class=\"token punctuation\">,</span>\n  useMutation<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n\n<span class=\"token comment\">// Other imports...</span>\n\n<span class=\"token keyword\">const</span> ApolloProviderWithFetchConfig<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FunctionComponent<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span>ApolloClientOptions<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InMemoryCache</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">, 'cache'>\n}> = ({ config = {}, children }) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> uri<span class=\"token punctuation\">,</span> headers <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetchConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    uri<span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApolloProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ApolloProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nexport const RedwoodApolloProvider: React.FunctionComponent&lt;</span><span class=\"token punctuation\">{</span>\n  graphQLClientConfig<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span>ApolloClientOptions<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InMemoryCache</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">, 'cache'>\n  useAuth: () => AuthContextInterface\n}> = ({ graphQLClientConfig, useAuth, children }) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FetchConfigProvider</span></span> <span class=\"token attr-name\">useAuth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useAuth<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApolloProviderWithFetchConfig</span></span> <span class=\"token attr-name\">config</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>graphQLClientConfig<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GraphQLHooksProvider</span></span> <span class=\"token attr-name\">useQuery</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useQuery<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">useMutation</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useMutation<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlashProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FlashProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">GraphQLHooksProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ApolloProviderWithFetchConfig</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FetchConfigProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So <code class=\"language-text\">&lt;RedwoodProvider&gt;</code> is a renamed export of <code class=\"language-text\">&lt;RedwoodApolloProvider&gt;</code> that wrapps the <code class=\"language-text\">&lt;ApolloProvider&gt;</code> context around its children, and passes <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> from <code class=\"language-text\">@apollo/client</code> to <code class=\"language-text\">&lt;GraphQLHooksProvider&gt;</code>.</p>\n<p>The new powerful thing is that we can remove <code class=\"language-text\">&lt;RedwoodProvider&gt;</code> from our code and do what it does on our own instead — and that gives us the ability to pass in other <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> hooks from some other GraphQL client. For Apollo Client it's super easy. (It's almost as if Redwood was built for usage with Apollo Client 😜) All you have to do is import <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> and pass them straight into <code class=\"language-text\">&lt;GraphQLHooksProvider&gt;</code>. For any other graphql client you are probably going to have to write some adapter code to make it all work.</p>\n<p>The other thing we need to do is to create our graphql client. And the client will need to know what headers to send and what url to talk to. For this we have the <code class=\"language-text\">useFetchConfig()</code> hook. Again, it's super straightforward to use with Apollo Client, but should be fairly easy to use with your client of choice as well.</p>\n<p>This is an example of how it can be done when wiring up <a href=\"https://github.com/nearform/graphql-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">graphql-hooks</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useQueryAdapter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useMutationAdapter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GraphqlHooksClientProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span> headers <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetchConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">,</span> headers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ClientContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ClientContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FatalErrorBoundary</span></span> <span class=\"token attr-name\">page</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>FatalErrorPage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>netlifyIdentity<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>netlify<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FetchConfigProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GraphqlHooksClientProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GraphQLHooksProvider</span></span>\n            <span class=\"token attr-name\">useQuery</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useQueryAdapter<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">useMutation</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useMutationAdapter<span class=\"token punctuation\">}</span></span>\n          <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlashProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Routes</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FlashProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">GraphQLHooksProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">GraphqlHooksClientProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FetchConfigProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AuthProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FatalErrorBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redwood-app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The adaptors for the hooks are simple. Only change we had to do was to transform the graphql queries that come as GQL ASTs in to plain strings. We use the <code class=\"language-text\">print</code> function for this. Setting up the client using <code class=\"language-text\">useFetchConfig()</code> is also easy, just have to rename <code class=\"language-text\">uri</code> to <code class=\"language-text\">url</code> for graphql-hooks to be happy.</p>\n<p>You can see a full implementation in this GitHub repo: <a href=\"https://github.com/Tobbe/redwood-graphql-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Tobbe/redwood-graphql-hooks</a> (But there really isn't much more to it than what I've shown here.)</p>\n<p>So, why do we have to let Redwood know about our <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> hooks in the first place? <code class=\"language-text\">useQuery</code> is used internally by Redwood with Cells, in its <code class=\"language-text\">withCellHOC</code>. <code class=\"language-text\">useMutation</code> technically wouldn't be necessary. But having it there allows the generators to generate code that runs and is valid. Without it, generated code like this would never be valid: <code class=\"language-text\">import { useMutation, useFlash } from &#39;@redwoodjs/web&#39;</code>. (That line is from the <code class=\"language-text\">EditNameCell.js.template</code> file.)</p>\n<p><span style=\"font-size: 80%\">(Header photo by <a href=\"https://unsplash.com/@armand_khoury?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Armand Khoury</a> on <a href=\"https://unsplash.com/s/photos/graph?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</span></p>","excerpt":"RedwoodJS ships with Apollo Client as its default GraphQL client. With the 0.22.0 release of Redwood it's now possible to use another GraphQL client if you want. The key is the new  component where you can plug in whatever  and  hooks you want, as…","fields":{"slug":"/2021-01-18/redwood-switch-to-another-graphql-client/"},"frontmatter":{"title":"Switching to Another GraphQL Client in RedwoodJS","date":"2021-01-18","category":"RedwoodJS","tags":["RedwoodJS","JavaScript","GraphQL","Apollo Client","graphql-hooks"],"banner":"/assets/bg/graph.jpg"},"timeToRead":4}},"pageContext":{"slug":"/2021-01-18/redwood-switch-to-another-graphql-client/","prev":{"excerpt":"Recently I had to download files from a RedwoodJS Function (AWS Lambda serverless function). The files contained sensitive information, so I needed to host them somewhere where I could control who could download them. Easiest for me was to put them…","html":"<p>Recently I had to download files from a RedwoodJS Function (AWS Lambda serverless function). The files contained sensitive information, so I needed to host them somewhere where I could control who could download them. Easiest for me was to put them in an Amazon AWS S3 Bucket, and then create an IAM policy to give a single user read-only access to the files.</p>\n<p>Here's a step-by-step guide or tutorial on how I did it.</p>\n<h2 id=\"aws-s3-bucket\" style=\"position:relative;\"><a href=\"#aws-s3-bucket\" aria-label=\"aws s3 bucket permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS S3 Bucket</h2>\n<p>The first step is going to be to set up our storage. Go to <a href=\"https://aws.amazon.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aws.amazon.com/</a> and sign in to the AWS Management Console (or create an account if you don't have one already).</p>\n<p><img src=\"/assets/aws_signin.png\" alt=\"Screenshot of AWS Management drop-down item and signup button\" title=\"aws signin/signup screenshot\"></p>\n<p>Choose to sign in as \"Root user\" and then you'll find S3 under \"Storage\" to the left. Here's a direct link that you might be able to use <a href=\"https://s3.console.aws.amazon.com/s3/home?region=us-east-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://s3.console.aws.amazon.com/s3/home?region=us-east-1</a>. Click \"Create bucket\" and give it a unique name. All other options can be left with their default values, so just scroll down and click \"Create bucket\"</p>\n<p><img src=\"/assets/aws_new_bucket.png\" alt=\"Truncated screenshot showing creation of new bucket\" title=\"aws new bucket\"></p>\n<p>Now that you have a new bucket created, it's time to set up a user with a policy that lets it access the files in the bucket. In the upper left corner of the screen you click on \"Services\" and then you can search for \"iam\" and click the first and only result to go to \"Identity and Access Management\". </p>\n<p><img src=\"/assets/aws_services_iam.png\" alt=\"Screenshot showing the menu option to got to IAM\" title=\"menu to go to iam\"></p>\n<p>Click \"Policies\" in the left menu and then the blue \"Create policy\" button up top.</p>\n<p><img src=\"/assets/aws_create_policy_button.png\" alt=\"Screenshot of blue Create policy button\" title=\"create policy button\"></p>\n<p>When creating your new policy you should select the \"S3\" service, choose the \"GetObject\" Read action, add the ARN (Amazon Resource Name) for the files you want to give access to by typing in the name of your newly created bucket and clicking \"Any\" on the object name to allow access to all files in the bucket, and finally you can leave the \"Request conditions\" as it is.</p>\n<p>This is what it looked like for me when I created the policy</p>\n<p><img src=\"/assets/aws_visual_policy.png\" alt=\"Screenshot of visual policy editor\" title=\"visual policy editor\"></p>\n<p>Click \"Review policy\" (bottom right), give your policy a name, like \"example-secure-bucket-tlundberg-com-policy\" and finally click the blue \"Create policy\" button.</p>\n<p>Now, with the policy created, we'll go ahead and create a user that we'll connect this policy to. So click \"Users\" in the left menu and the the blue \"Add user\" button. Give the user a name, like \"example-secure-bucket-tlundberg-com-user\" and select the \"Programatic access\" access type. This will let you use this user with the AWS SDK and APIs.</p>\n<p><img src=\"/assets/aws_new_user.png\" alt=\"New user screenshot\" title=\"new user\"></p>\n<p>Now click \"Next: Permissions\", and on the new page you chose \"Attach existing policies directly\" (it's the last box in the row up top). Filter the list of policies to find the one you created previously and click the checkbox next to it.</p>\n<p><img src=\"/assets/aws_new_user_policy.png\" alt=\"New user policy screenshot\" title=\"new user policy\"></p>\n<p>This was the last step where we had to do anything, so just click \"Next: Tags\", \"Next: Review\" and finally \"Create user\".</p>\n<p>Now it's important you save the secret access key for this user, because you will not be able to find it again. Either download the .csv file, or copy/paste the values to somewhere safe. After you've saved the credentials you can close the \"Add user\" wizard. Should you lose the Access key ID and/or the Access Secret you can come back here to generate new ones.</p>\n<p>You're finally done with AWS and it's time to move on to RedwoodJS stuff.</p>\n<h2 id=\"redwoodjs-function\" style=\"position:relative;\"><a href=\"#redwoodjs-function\" aria-label=\"redwoodjs function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RedwoodJS Function</h2>\n<p>Create a new Redwood project if you don't have one already, and add a new file in <code class=\"language-text\">api/src/functions/</code>. I called mine <code class=\"language-text\">s3download.js</code>. Add this code to the file</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>S3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    accessKeyId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_KEY_ID</span><span class=\"token punctuation\">,</span>\n    secretAccessKey<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_SECRET</span><span class=\"token punctuation\">,</span>\n    region<span class=\"token operator\">:</span> <span class=\"token string\">'us-east-1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> s3Result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> s3\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        Bucket<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_BUCKET</span><span class=\"token punctuation\">,</span>\n        Key<span class=\"token operator\">:</span> <span class=\"token string\">'my_s3_file.txt'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> s3File <span class=\"token operator\">=</span> s3Result<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file contents'</span><span class=\"token punctuation\">,</span> s3File<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">'File downloaded successfully'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have to install the <code class=\"language-text\">aws-sdk</code> package to use this function. Do that by running <code class=\"language-text\">yarn workspace api add aws-sdk</code>.</p>\n<p>As you can see the function uses three environment variables. Under no circumstances should you put your bucket credential directly in your source code, because it will (probably) be pushed to GitHub, where other people could see it. Even if it's a private repo it's just yet anohter place your credentials could be compromised. So instead we use environment variables. Let's add them to the <code class=\"language-text\">.env</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">S3_KEY_ID=KYSA9EKSDFHCK88194UK\nS3_SECRET=dsli5lsi92klsjdf120sdfGsiSDDKSKS3sdflkjS\nS3_BUCKET=example-secure-bucket-tlundberg-com</code></pre></div>\n<p>Those are just made-up values to show you what it should look like, use your values instead. Also make sure the <code class=\"language-text\">region</code> in the code matches the region you have your bucket in.</p>\n<p>Before we can test this we need to upload the <code class=\"language-text\">my_s3_file.txt</code> file to the s3 bucket. Easiest is to just drag-and-drop it in the AWS web interface. So go ahead and do that. </p>\n<p>It's finally time to try it all out! Run <code class=\"language-text\">yarn rw dev</code> and you should be able to access your function at <a href=\"http://localhost:8911/s3download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8911/s3download</a>. You should see the message \"File downloaded successfully\" in your browser, and if you switch over to your console you should see the content of the file.</p>\n<p>Did it work? Congratulations! All the AWS setup is not easy. Thankfully it's pretty easy to use the SDK once everything is set up correctly. </p>\n<p>Thanks for reading! </p>\n<p><span style=\"font-size: 80%\">(Header photo by <a href=\"https://unsplash.com/@jdjohnston?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jessica Johnston</a> on <a href=\"https://unsplash.com/s/photos/buckets?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</span></p>","id":"0833c517-1be6-5b8f-949c-dd07064a0312","fields":{"slug":"/2020-11-28/redwood-download-files-from-protected-s3/"},"frontmatter":{"date":"2020-11-28","title":"Using RedwoodJS to download protected files from an Amazon S3 bucket","category":"RedwoodJS","tags":["RedwoodJS","JavaScript","Amazon","AWS","S3","DevOps","Security"],"banner":"/assets/bg/buckets.jpg"},"timeToRead":4},"next":{"excerpt":"Document editing mode on Netlify CMS gives you two panes, one with the editor, and one with a preview. By using the global  object you can customize the preview. What we're going to do here is to make it render the markdown we write in the editor…","html":"<p>Document editing mode on Netlify CMS gives you two panes, one with the editor, and one with a preview. By using the global <code class=\"language-text\">CMS</code> object you can customize the preview. What we're going to do here is to make it render the markdown we write in the editor with <a href=\"https://github.com/remarkjs/react-markdown\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-markdown</code></a> which we extend with the <a href=\"https://github.com/remarkjs/remark-gfm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">remark-gfm</code></a> plugin to add support for Github Flavored Markdown (tables, strikethrough, etc).</p>\n<p><img src=\"/assets/gfm_screenshot.png\" alt=\"Screenshot of Netlify CMS with GFM enabled preview\" title=\"NetlifyCMS GFM screenshot\"></p>\n<p>The way the preview customization works is you tell <code class=\"language-text\">CMS</code> what collection to use the custom preview for, and you give it a React component to use. You can only write old-school class components, and you have to use the <code class=\"language-text\">createClass</code> and <code class=\"language-text\">h</code> helper functions provided by NetlifyCMS.</p>\n<p>Below is an example that creates a <code class=\"language-text\">DocPreview</code> React component and tells <code class=\"language-text\">CMS</code> to use that whenever it's showing a preview for a document in the <code class=\"language-text\">&quot;pages&quot;</code> category. The <code class=\"language-text\">render()</code> function uses the <code class=\"language-text\">widgetFor()</code> helper function (read more in the <a href=\"https://www.netlifycms.org/docs/customization/#registerpreviewtemplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NetifyCMS docs</a>) to get the default widget used to display the <code class=\"language-text\">&#39;body&#39;</code> field, and nothing else. By default the preview will show all fields, like \"title\" etc, but here we're stripping those out.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Netlify CMS Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/netlify-cms@^2.10.0/dist/netlify-cms.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> DocPreview <span class=\"token operator\">=</span> <span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">widgetFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      window<span class=\"token punctuation\">.</span><span class=\"token constant\">CMS</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerPreviewTemplate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pages\"</span><span class=\"token punctuation\">,</span> DocPreview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Another thing we can do is take the plain text from the \"body\" field and dump it in a <code class=\"language-text\">&lt;div&gt;</code> with the <code class=\"language-text\">h()</code> function, which is basically just an alias for <a href=\"https://reactjs.org/docs/react-api.html#createelement\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React's <code class=\"language-text\">createElement()</code></a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Netlify CMS Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/netlify-cms@^2.10.0/dist/netlify-cms.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> DocPreview <span class=\"token operator\">=</span> <span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> bodyText <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> bodyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      window<span class=\"token punctuation\">.</span><span class=\"token constant\">CMS</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerPreviewTemplate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pages\"</span><span class=\"token punctuation\">,</span> DocPreview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Since we're writing all the code in a basic <code class=\"language-text\">index.html</code> file without any kind of build tooling to support us we can't just do <code class=\"language-text\">npm install</code> and then <code class=\"language-text\">include</code>-ing the package. All we have to work with is the <code class=\"language-text\">&lt;script&gt;</code> tag. So whatever we want to use has to be in AMD or UMD module format. Thankfully <code class=\"language-text\">react-markdown</code> provides an umd build we can use straight from <a href=\"https://unpkg.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">unpkg.com</a>.</p>\n<p>So just put <a href=\"https://unpkg.com/react-markdown@5.0.3/react-markdown.min.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://unpkg.com/react-markdown@5.0.3/react-markdown.min.js</a> in a <code class=\"language-text\">&lt;script&gt;</code> tag, and you'll have <code class=\"language-text\">window.ReactMarkdown</code> available, which is a React component you can use inside your custom <code class=\"language-text\">render</code> method.</p>\n<p>With this you should be back to something that works the same as when we used <code class=\"language-text\">widgetFor()</code> except now we're using our own Markdown renderer, and not Netlify CMS's.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Netlify CMS Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/netlify-cms@^2.10.0/dist/netlify-cms.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-markdown@5.0.3/react-markdown.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> DocPreview <span class=\"token operator\">=</span> <span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> bodyText <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ReactMarkdown<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> bodyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      window<span class=\"token punctuation\">.</span><span class=\"token constant\">CMS</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerPreviewTemplate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pages\"</span><span class=\"token punctuation\">,</span> DocPreview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The final step is to add support for Github Flavored Markdown, so we can do tables, strikethrough text and other things. The <code class=\"language-text\">window.ReactMarkdown</code> component takes a <code class=\"language-text\">plugin</code> prop that lets you augment it with different plugins, one which is <a href=\"https://github.com/remarkjs/remark-gfm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">remark-gfm</code></a>. Unfortunately that package doesn't have a UMD build for us to use, it's only available in CJS (CommonJS) format. There is a tool called Browserify that takes CJS modules and converts them to modules that can be used by the browser. But it's a command line tool that you'd add to your tooling. Which, we don't have here. Thankfully someone turned it into a web service we can use! <a href=\"https://wzrd.in\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wzrd.in</a> takes any npm package and tries to run it through Browserify and serves up the built package for you. First time it's run it takes a while, but after that it's cached and then it's much faster. Here's the link for the Browserified version of remark-gfm: <a href=\"https://wzrd.in/standalone/remark-gfm@1.0.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wzrd.in/standalone/remark-gfm@1.0.0</a>. Add that to a script tag and you'll have the plugin available at <code class=\"language-text\">window.remarkGfm</code>. Add that as a plugin to react-markdown and you're done!</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Netlify CMS Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/netlify-cms@^2.10.0/dist/netlify-cms.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-markdown@5.0.3/react-markdown.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://wzrd.in/standalone/remark-gfm@1.0.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> DocPreview <span class=\"token operator\">=</span> <span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> bodyText <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ReactMarkdown<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>remarkGfm<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> bodyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      window<span class=\"token punctuation\">.</span><span class=\"token constant\">CMS</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerPreviewTemplate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pages\"</span><span class=\"token punctuation\">,</span> DocPreview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Try writing some markdown jazzed up with a bit of gfm syntax to make sure everything works.</p>\n<p>That's it. Hope this guide was helpful!</p>\n<p><span style=\"font-size: 80%\">(Header photo by <a href=\"https://unsplash.com/@richygreat?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Richy Great</a> on <a href=\"https://unsplash.com/s/photos/github?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</span></p>","id":"172e7568-cec4-530f-ab0e-3a8060e4833c","fields":{"slug":"/2021-02-11/netlify-cms-github-flavored-markdown/"},"frontmatter":{"date":"2021-02-11","title":"Using Github Flavored Markdown in the Netlify CMS Preview Pane","category":"NetlifyCMS","tags":["NetlifyCMS","Netlify CMS","React","Markdown","GFM","Remark"],"banner":"/assets/bg/github.jpg"},"timeToRead":5}}}}