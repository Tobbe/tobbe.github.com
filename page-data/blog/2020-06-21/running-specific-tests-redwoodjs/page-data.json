{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2020-06-21/running-specific-tests-redwoodjs/","result":{"data":{"markdownRemark":{"html":"<p>Running the test suite for the RedwoodJS Framework is pretty straighforward. <code class=\"language-text\">yarn install</code> followed by <code class=\"language-text\">yarn test</code> is all that's needed. You will probably see some warnings about missing peer dependencies when installing, but those can safely be ignored.</p>\n<p>Running all the tests takes a little while however, so when working on a specific feature it's somethimes helpful to be able to just run the tests for a specific package, or even just a specific test. So that's what I want to show here.</p>\n<p>Let's say for example you want to run the tests for the <code class=\"language-text\">cli</code> package. First, go in to the cli directory; <code class=\"language-text\">cd packages/cli</code>. Then run all the tests by issuing <code class=\"language-text\">yarn test</code> (or <code class=\"language-text\">yarn jest</code>).</p>\n<p>For more granularity you can run a single test-file by passing the path to it to jest. Here's the command and example output from running the page generator tests.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn test src/commands/generate/page/__tests__/page.test.js\nyarn run v1.22.4\n$ jest src/commands/generate/page/__tests__/page.test.js\n FAIL  src/commands/generate/page/__tests__/page.test.js (5.467s)\n  √ returns exactly 2 files (4ms)\n  × creates a page component (4ms)\n  × creates a page test\n  × creates a page component (1ms)\n  × creates a page test (2ms)\n  √ creates a single-word route name (1ms)\n  √ creates a camelCase route name for multiple word names (1ms)\n  √ creates a path equal to passed path</code></pre></div>\n<p>To run just one of the testcases, open up the test-file in your code editor, find the test definition and add <code class=\"language-text\">.only</code> to it. E.g. changing it from <code class=\"language-text\">test(&#39;creates a page test&#39;, () =&gt; {</code> to <code class=\"language-text\">test.only(&#39;creates a page test&#39;, () =&gt; {</code>. Run the test file again, and only the selected test case will execute. You can add <code class=\"language-text\">.only</code> to however many tests you like, and all the selected tests will run. The other tests in the file will be skipped.</p>\n<p>Example output when selecting three testcases to run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn test src/commands/generate/page/__tests__/page.test.js\nyarn run v1.22.4\n$ jest src/commands/generate/page/__tests__/page.test.js\n PASS  src/commands/generate/page/__tests__/page.test.js (5.598s)\n  √ creates a page test (3ms)\n  √ creates a page test (1ms)\n  √ creates a page component with a plural word for name\n  ○ skipped returns exactly 2 files\n  ○ skipped creates a page component\n  ○ skipped creates a page component\n  ○ skipped creates a single-word route name\n  ○ skipped creates a camelCase route name for multiple word names\n  ○ skipped creates a path equal to passed path\n\nTest Suites: 1 passed, 1 total\nTests:       6 skipped, 3 passed, 9 total\nSnapshots:   0 total\nTime:        7.306s\nRan all test suites matching /src\\\\commands\\\\generate\\\\page\\\\__tests__\\\\page.test.js/i.\nDone in 9.28s.</code></pre></div>","excerpt":"Running the test suite for the RedwoodJS Framework is pretty straighforward.  followed by  is all that's needed. You will probably see some warnings about missing peer dependencies when installing, but those can safely be ignored. Running all the…","fields":{"slug":"/2020-06-21/running-specific-tests-redwoodjs/"},"frontmatter":{"title":"Running specific tests in RedwoodJS core","date":"2020-06-21","category":"RedwoodJS","tags":["RedwoodJS","Testing","JavaScript","Jest"],"banner":"/assets/bg/4.jpg"},"timeToRead":2}},"pageContext":{"slug":"/2020-06-21/running-specific-tests-redwoodjs/","prev":{"excerpt":"This guide will help you install rsync on Windows 10. It is assumed that you already have Git for Windows installed. Screenshot of rsync running in PowerShell If you didn't already know, Git for Windows and its Git Bash environment is built using…","html":"<p>This guide will help you install rsync on Windows 10. It is assumed that you already have <a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git for Windows</a> installed.</p>\n<p><img src=\"/assets/rsync_windows.png\" alt=\"Screenshot of rsync running in PowerShell\" title=\"rsync screenshot\"></p>\n<p>If you didn't already know, Git for Windows and its Git Bash environment is built using <a href=\"http://msys2.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">msys2</a>, but it doesn't include all the binaries from that project. One of the binaries that exists, but that isn't included, is rsync. So what we need to do is to download the msys2 rsync binary, and place it somewhere Git Bash can find it.</p>\n<ol>\n<li>Go to <a href=\"http://repo.msys2.org/msys/x86_64/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://repo.msys2.org/msys/x86_64/</a> and download the latest version of rsync (not rsync2). At the time of this writing that is rsync-3.1.3-1-x86_64.pkg.tar.xz</li>\n<li>Extract the downloaded archive. I'm using Total Commander with a .xz plugin, but 7-zip is also a great option. Download and install from <a href=\"https://www.7-zip.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.7-zip.org/</a> if you need to.</li>\n<li>Copy the contents of the extracted archive (sub-folders and all) to where you have Git for Windows installed. For me that's <code class=\"language-text\">C:\\Program Files\\Git\\</code>. (The archive contains a <code class=\"language-text\">\\usr</code> folder, and so does the git installation directory. What you want is for everything inside of the <code class=\"language-text\">\\usr</code> folder in the archive to end up in the <code class=\"language-text\">\\usr</code> folder in the git installation directory, ultimately ending up with, among other files, <code class=\"language-text\">C:\\Program Files\\Git\\usr\\bin\\rsync.exe</code>)</li>\n</ol>\n<p>That's it. You now have rsync installed. You can test your installation by opening up a Git Bash command line window and running <code class=\"language-text\">rsync --version</code>. You should see it print out version information.</p>\n<p>Now, if you want to use rsync from the Windows Command Prompt, or from PowerShell, there is one more step.</p>\n<p>Create a new <code class=\"language-text\">.bat</code> file with the following content (adjust the path to match your environment)</p>\n<div class=\"gatsby-highlight\" data-language=\"batch\"><pre class=\"language-batch\"><code class=\"language-batch\">\"C:\\Program Files\\Git\\usr\\bin\\rsync.exe\" %* </code></pre></div>\n<p>Name the file <code class=\"language-text\">rsync.bat</code> and place it somewhere in your %PATH%. I placed mine in <code class=\"language-text\">C:\\Windows\\</code>. Press <span class=\"nowrap\"><kbd>Win</kbd> + <kbd>R</kbd></span> and enter <code class=\"language-text\">cmd</code>. In the Command Prompt window that you just launched, enter <code class=\"language-text\">rsync --version</code> and it will find your <code class=\"language-text\">.bat</code>-file and run it, passing all arguments (that's what <code class=\"language-text\">%*</code> does in the command above) off to your newly installed rsync.exe</p>\n<p>The first three steps above are based on <a href=\"https://serverfault.com/questions/310337/using-rsync-from-msysgit-for-binary-files/872557#872557\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://serverfault.com/questions/310337/using-rsync-from-msysgit-for-binary-files/872557#872557</a> where you can also find instructions for setting up Pageant for SSH, if that's something you need.</p>\n<p>I hope this short tutorial was useful to you. Happy rsyncing!</p>","id":"68d4da1a-f515-509f-8738-1d78198954b5","fields":{"slug":"/2020-06-15/installing-rsync-on-windows/"},"frontmatter":{"date":"2020-06-15","title":"Installing rsync on Windows","category":"Windows/Linux","tags":["rsync","Tools","Git","Windows"],"banner":"/assets/bg/4.jpg"},"timeToRead":2},"next":{"excerpt":"This tutorial will show you one way to implement pagination in an app built using RedwoodJS. It builds ontop of the official RedwoodJS tutorial and I'll assume you have a folder with the code from the tutorial that you can continue working on. (If…","html":"<p>This tutorial will show you one way to implement pagination in an app built using RedwoodJS. It builds ontop of <a href=\"https://redwoodjs.com/tutorial/welcome-to-redwood\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the official RedwoodJS tutorial</a> and I'll assume you have a folder with the code from the tutorial that you can continue working on. (If you don't, you can clone this repo: <a href=\"https://github.com/thedavidprice/redwood-tutorial-test\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/thedavidprice/redwood-tutorial-test</a>)</p>\n<p><img src=\"/assets/redwood_pagination.png\" alt=\"Screenshot of pagination\" title=\"pagination screenshot\"></p>\n<p>The screenshot above shows what we're building. See the pagination at the bottom? The styling is up to you to fix.</p>\n<p>So you have a blog, and probably only a few short posts. But as the blog grows bigger you'll soon need to paginate all your posts. So, go ahead and create a bunch of posts to make this pagination worthwhile. We'll display five posts per page, so begin with creating at least six posts, to get two pages.</p>\n<p>We'll begin by updating the SDL. To our Query type a new query is added to get just a single page of posts. We'll pass in the page we want, and when returning the result we'll also include the total number of posts as that'll be needed when building our pagination component.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token comment\"># api/src/graphql/posts.sdl.js</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PostPage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Post<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">count</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">postPage</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">page</span><span class=\"token punctuation\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> PostPage\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Post<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">post</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Post<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You might have noticed that we made the page optional. That's because we want to be able to default to the first page if no page is provided.</p>\n<p>Now we need to add a resolver for this new query to our posts service.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// api/src/services/posts/posts.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS_PER_PAGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">postPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">POSTS_PER_PAGE</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token operator\">:</span> db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">findMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      take<span class=\"token operator\">:</span> <span class=\"token constant\">POSTS_PER_PAGE</span><span class=\"token punctuation\">,</span>\n      skip<span class=\"token operator\">:</span> offset<span class=\"token punctuation\">,</span>\n      orderBy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> createdAt<span class=\"token operator\">:</span> <span class=\"token string\">'desc'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    count<span class=\"token operator\">:</span> db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now we can make a GraphQL request (using <a href=\"https://www.apollographql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo</a>) for a specific page of our blog posts. And the resolver we just updated will use <a href=\"https://www.prisma.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prisma</a> to fetch the correct posts from our database.</p>\n<p>With these updates to the API side of things done, it's time to move over to the web side. It's the BlogPostsCell component that makes the gql query to display the list of blog posts on the HomePage of the blog, so let's update that query. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">QUERY</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query BlogPostsQuery($page: Int) {\n    postPage(page: $page) {\n      posts {\n        id\n        title\n        body\n        createdAt\n      }\n      count\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>The <code class=\"language-text\">Success</code> component in the same file also needs a bit of an update to handle the new gql query result structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Success</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> postPage <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> postPage<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>BlogPost key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we need a way to pass a value for the <code class=\"language-text\">page</code> parameter to the query. To do that we'll take advantage of a little RedwoodJS magic. Remember from the tutorial how you made the post id part of the route path (<code class=\"language-text\">&lt;Route path=&quot;/blog-post/{id:Int}&quot; page={BlogPostPage} name=&quot;blogPost&quot; /&gt;</code>) and that id was then sent as a prop to the BlogPostPage component? We'll do something similar here for the page number, but instead of making it a part of the url path, we'll make it a url query string. These, too, are magically passed as a prop to the relevant page component. And you don't even have to update the route to make it work! Let's update <code class=\"language-text\">HomePage.js</code> to handle the prop.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/pages/HomePage/HomePage.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HomePage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>BlogLayout<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>BlogPostsCell page<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BlogLayout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now if someone navigates to <a href=\"https://awesomeredwoodjsblog.com?page=2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://awesomeredwoodjsblog.com?page=2</a> (and the blog was actually hosted on awesomeredwoodjsblog.com), then <code class=\"language-text\">HomePage</code> would have its <code class=\"language-text\">page</code> prop set to <code class=\"language-text\">&quot;2&quot;</code>, and we then pass that value along to <code class=\"language-text\">BlogPostsCell</code>. If no <code class=\"language-text\">?page=</code> query parameter is provided <code class=\"language-text\">page</code> will default to <code class=\"language-text\">1</code></p>\n<p>Going back to <code class=\"language-text\">BlogPostsCell</code> there is one me thing to add before the query parameter work.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">beforeQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  page <span class=\"token operator\">=</span> page <span class=\"token operator\">?</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The query parameter is passed to the component as a string, so we need to parse it into a number.</p>\n<p>If you run the project with <code class=\"language-text\">yarn rw dev</code> on the default port 8910 you can now go to <a href=\"http://localhost:8910\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8910</a> and you should only see the first five posts. Change the URL to <a href=\"http://localhost:8910?page=2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8910?page=2</a> and you should see the next five posts (if you have that many, if you only have six posts total you should now see just one post).</p>\n<p>The final thing to add is a page selector, or pagination component, to the end of the list of posts to be able to click and jump between the different pages.</p>\n<p>Generate a new component with <code class=\"language-text\">yarn rw g component Pagination</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/Pagination/Pagination.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link<span class=\"token punctuation\">,</span> routes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@redwoodjs/router'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS_PER_PAGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Pagination</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">/</span> <span class=\"token constant\">POSTS_PER_PAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> page<span class=\"token operator\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Pagination<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Pagination</code></pre></div>\n<p>Keeping with the theme of the official RedwoodJS tutorial we're not adding any css, but if you wanted the pagination to look a little nicer it'd be easy to remove the bullets from that list, and make it horizontal instead of vertical.</p>\n<p>Finally let's add this new component to the end of <code class=\"language-text\">BlogPostsCell</code>. Don't forget to <code class=\"language-text\">import</code> it at the top as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">import</span> Pagination <span class=\"token keyword\">from</span> <span class=\"token string\">'src/components/Pagination'</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Success</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> postPage <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>postPage<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>BlogPost key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token operator\">&lt;</span>Pagination count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>postPage<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And there you have it! You have now added a functioning, but somewhat ugly, pagination to your redwood blog. One techincal limitation to the current implementation is that it doesn't handle too many pages very gracefully. Just imagine what that list of pages would look like if you had 100 pages! I'll write another blog post in the future with a more fully featured pagination component. </p>\n<p>Most of the code in this tutorial was copy/pasted from the <a href=\"https://github.com/redwoodjs/example-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"Hammer Blog\" RedwoodJS example</a></p>\n<p>If you want to learn more about pagination with Prisma and Apollo they both have excelent docs on the topic. <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/pagination\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/pagination</a> <a href=\"https://www.apollographql.com/docs/react/data/pagination/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.apollographql.com/docs/react/data/pagination/</a></p>","id":"07e4e2dd-7d47-5e82-ba05-e90ea4d6ad96","fields":{"slug":"/2020-09-16/redwood-pagination-tutorial/"},"frontmatter":{"date":"2020-09-15","title":"Redwood Pagination Tutorial","category":"RedwoodJS","tags":["RedwoodJS","GraphQL","Prisma","Coding","JavaScript"],"banner":"/assets/bg/5.jpg"},"timeToRead":5}}}}