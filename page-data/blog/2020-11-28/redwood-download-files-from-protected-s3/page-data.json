{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2020-11-28/redwood-download-files-from-protected-s3/","result":{"data":{"markdownRemark":{"html":"<p>Recently I had to download files from a RedwoodJS Function (AWS Lambda serverless function). The files contained sensitive information, so I needed to host them somewhere where I could control who could download them. Easiest for me was to put them in an Amazon AWS S3 Bucket, and then create an IAM policy to give a single user read-only access to the files.</p>\n<p>Here's a step-by-step guide or tutorial on how I did it.</p>\n<h2 id=\"aws-s3-bucket\" style=\"position:relative;\"><a href=\"#aws-s3-bucket\" aria-label=\"aws s3 bucket permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS S3 Bucket</h2>\n<p>The first step is going to be to set up our storage. Go to <a href=\"https://aws.amazon.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aws.amazon.com/</a> and sign in to the AWS Management Console (or create an account if you don't have one already).</p>\n<p><img src=\"/assets/aws_signin.png\" alt=\"Screenshot of AWS Management drop-down item and signup button\" title=\"aws signin/signup screenshot\"></p>\n<p>Choose to sign in as \"Root user\" and then you'll find S3 under \"Storage\" to the left. Here's a direct link that you might be able to use <a href=\"https://s3.console.aws.amazon.com/s3/home?region=us-east-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://s3.console.aws.amazon.com/s3/home?region=us-east-1</a>. Click \"Create bucket\" and give it a unique name. All other options can be left with their default values, so just scroll down and click \"Create bucket\"</p>\n<p><img src=\"/assets/aws_new_bucket.png\" alt=\"Truncated screenshot showing creation of new bucket\" title=\"aws new bucket\"></p>\n<p>Now that you have a new bucket created, it's time to set up a user with a policy that lets it access the files in the bucket. In the upper left corner of the screen you click on \"Services\" and then you can search for \"iam\" and click the first and only result to go to \"Identity and Access Management\". </p>\n<p><img src=\"/assets/aws_services_iam.png\" alt=\"Screenshot showing the menu option to got to IAM\" title=\"menu to go to iam\"></p>\n<p>Click \"Policies\" in the left menu and then the blue \"Create policy\" button up top.</p>\n<p><img src=\"/assets/aws_create_policy_button.png\" alt=\"Screenshot of blue Create policy button\" title=\"create policy button\"></p>\n<p>When creating your new policy you should select the \"S3\" service, choose the \"GetObject\" Read action, add the ARN (Amazon Resource Name) for the files you want to give access to by typing in the name of your newly created bucket and clicking \"Any\" on the object name to allow access to all files in the bucket, and finally you can leave the \"Request conditions\" as it is.</p>\n<p>This is what it looked like for me when I created the policy</p>\n<p><img src=\"/assets/aws_visual_policy.png\" alt=\"Screenshot of visual policy editor\" title=\"visual policy editor\"></p>\n<p>Click \"Review policy\" (bottom right), give your policy a name, like \"example-secure-bucket-tlundberg-com-policy\" and finally click the blue \"Create policy\" button.</p>\n<p>Now, with the policy created, we'll go ahead and create a user that we'll connect this policy to. So click \"Users\" in the left menu and the the blue \"Add user\" button. Give the user a name, like \"example-secure-bucket-tlundberg-com-user\" and select the \"Programatic access\" access type. This will let you use this user with the AWS SDK and APIs.</p>\n<p><img src=\"/assets/aws_new_user.png\" alt=\"New user screenshot\" title=\"new user\"></p>\n<p>Now click \"Next: Permissions\", and on the new page you chose \"Attach existing policies directly\" (it's the last box in the row up top). Filter the list of policies to find the one you created previously and click the checkbox next to it.</p>\n<p><img src=\"/assets/aws_new_user_policy.png\" alt=\"New user policy screenshot\" title=\"new user policy\"></p>\n<p>This was the last step where we had to do anything, so just click \"Next: Tags\", \"Next: Review\" and finally \"Create user\".</p>\n<p>Now it's important you save the secret access key for this user, because you will not be able to find it again. Either download the .csv file, or copy/paste the values to somewhere safe. After you've saved the credentials you can close the \"Add user\" wizard. Should you lose the Access key ID and/or the Access Secret you can come back here to generate new ones.</p>\n<p>You're finally done with AWS and it's time to move on to RedwoodJS stuff.</p>\n<h2 id=\"redwoodjs-function\" style=\"position:relative;\"><a href=\"#redwoodjs-function\" aria-label=\"redwoodjs function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RedwoodJS Function</h2>\n<p>Create a new Redwood project if you don't have one already, and add a new file in <code class=\"language-text\">api/src/functions/</code>. I called mine <code class=\"language-text\">s3download.js</code>. Add this code to the file</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>S3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    accessKeyId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_KEY_ID</span><span class=\"token punctuation\">,</span>\n    secretAccessKey<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_SECRET</span><span class=\"token punctuation\">,</span>\n    region<span class=\"token operator\">:</span> <span class=\"token string\">'us-east-1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> s3Result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> s3\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        Bucket<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">S3_BUCKET</span><span class=\"token punctuation\">,</span>\n        Key<span class=\"token operator\">:</span> <span class=\"token string\">'my_s3_file.txt'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> s3File <span class=\"token operator\">=</span> s3Result<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file contents'</span><span class=\"token punctuation\">,</span> s3File<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">'File downloaded successfully'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have to install the <code class=\"language-text\">aws-sdk</code> package to use this function. Do that by running <code class=\"language-text\">yarn workspace api add aws-sdk</code>.</p>\n<p>As you can see the function uses three environment variables. Under no circumstances should you put your bucket credential directly in your source code, because it will (probably) be pushed to GitHub, where other people could see it. Even if it's a private repo it's just yet anohter place your credentials could be compromised. So instead we use environment variables. Let's add them to the <code class=\"language-text\">.env</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">S3_KEY_ID=KYSA9EKSDFHCK88194UK\nS3_SECRET=dsli5lsi92klsjdf120sdfGsiSDDKSKS3sdflkjS\nS3_BUCKET=example-secure-bucket-tlundberg-com</code></pre></div>\n<p>Those are just made-up values to show you what it should look like, use your values instead. Also make sure the <code class=\"language-text\">region</code> in the code matches the region you have your bucket in.</p>\n<p>Before we can test this we need to upload the <code class=\"language-text\">my_s3_file.txt</code> file to the s3 bucket. Easiest is to just drag-and-drop it in the AWS web interface. So go ahead and do that. </p>\n<p>It's finally time to try it all out! Run <code class=\"language-text\">yarn rw dev</code> and you should be able to access your function at <a href=\"http://localhost:8911/s3download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8911/s3download</a>. You should see the message \"File downloaded successfully\" in your browser, and if you switch over to your console you should see the content of the file.</p>\n<p>Did it work? Congratulations! All the AWS setup is not easy. Thankfully it's pretty easy to use the SDK once everything is set up correctly. </p>\n<p>Thanks for reading! </p>\n<p><span style=\"font-size: 80%\">(Header photo by <a href=\"https://unsplash.com/@jdjohnston?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jessica Johnston</a> on <a href=\"https://unsplash.com/s/photos/buckets?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</span></p>","excerpt":"Recently I had to download files from a RedwoodJS Function (AWS Lambda serverless function). The files contained sensitive information, so I needed to host them somewhere where I could control who could download them. Easiest for me was to put them…","fields":{"slug":"/2020-11-28/redwood-download-files-from-protected-s3/"},"frontmatter":{"title":"Using RedwoodJS to download protected files from an Amazon S3 bucket","date":"2020-11-28","category":"RedwoodJS","tags":["RedwoodJS","JavaScript","Amazon","AWS","S3","DevOps","Security"],"banner":"/assets/bg/buckets.jpg"},"timeToRead":4}},"pageContext":{"slug":"/2020-11-28/redwood-download-files-from-protected-s3/","prev":{"excerpt":"This tutorial will show you one way to implement pagination in an app built using RedwoodJS. It builds ontop of the official RedwoodJS tutorial and I'll assume you have a folder with the code from the tutorial that you can continue working on. (If…","html":"<p>This tutorial will show you one way to implement pagination in an app built using RedwoodJS. It builds ontop of <a href=\"https://redwoodjs.com/tutorial/welcome-to-redwood\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the official RedwoodJS tutorial</a> and I'll assume you have a folder with the code from the tutorial that you can continue working on. (If you don't, you can clone this repo: <a href=\"https://github.com/thedavidprice/redwood-tutorial-test\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/thedavidprice/redwood-tutorial-test</a>)</p>\n<p><img src=\"/assets/redwood_pagination.png\" alt=\"Screenshot of pagination\" title=\"pagination screenshot\"></p>\n<p>The screenshot above shows what we're building. See the pagination at the bottom? The styling is up to you to fix.</p>\n<p>So you have a blog, and probably only a few short posts. But as the blog grows bigger you'll soon need to paginate all your posts. So, go ahead and create a bunch of posts to make this pagination worthwhile. We'll display five posts per page, so begin with creating at least six posts, to get two pages.</p>\n<p>We'll begin by updating the SDL. To our Query type a new query is added to get just a single page of posts. We'll pass in the page we want, and when returning the result we'll also include the total number of posts as that'll be needed when building our pagination component.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token comment\"># api/src/graphql/posts.sdl.js</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PostPage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Post<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">count</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">postPage</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">page</span><span class=\"token punctuation\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> PostPage\n  <span class=\"token attr-name\">posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Post<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">post</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Post<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You might have noticed that we made the page optional. That's because we want to be able to default to the first page if no page is provided.</p>\n<p>Now we need to add a resolver for this new query to our posts service.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// api/src/services/posts/posts.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS_PER_PAGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">postPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">POSTS_PER_PAGE</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token operator\">:</span> db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">findMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      take<span class=\"token operator\">:</span> <span class=\"token constant\">POSTS_PER_PAGE</span><span class=\"token punctuation\">,</span>\n      skip<span class=\"token operator\">:</span> offset<span class=\"token punctuation\">,</span>\n      orderBy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> createdAt<span class=\"token operator\">:</span> <span class=\"token string\">'desc'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    count<span class=\"token operator\">:</span> db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now we can make a GraphQL request (using <a href=\"https://www.apollographql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo</a>) for a specific page of our blog posts. And the resolver we just updated will use <a href=\"https://www.prisma.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prisma</a> to fetch the correct posts from our database.</p>\n<p>With these updates to the API side of things done, it's time to move over to the web side. It's the BlogPostsCell component that makes the gql query to display the list of blog posts on the HomePage of the blog, so let's update that query. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">QUERY</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query BlogPostsQuery($page: Int) {\n    postPage(page: $page) {\n      posts {\n        id\n        title\n        body\n        createdAt\n      }\n      count\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>The <code class=\"language-text\">Success</code> component in the same file also needs a bit of an update to handle the new gql query result structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Success</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> postPage <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> postPage<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>BlogPost key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we need a way to pass a value for the <code class=\"language-text\">page</code> parameter to the query. To do that we'll take advantage of a little RedwoodJS magic. Remember from the tutorial how you made the post id part of the route path (<code class=\"language-text\">&lt;Route path=&quot;/blog-post/{id:Int}&quot; page={BlogPostPage} name=&quot;blogPost&quot; /&gt;</code>) and that id was then sent as a prop to the BlogPostPage component? We'll do something similar here for the page number, but instead of making it a part of the url path, we'll make it a url query string. These, too, are magically passed as a prop to the relevant page component. And you don't even have to update the route to make it work! Let's update <code class=\"language-text\">HomePage.js</code> to handle the prop.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/pages/HomePage/HomePage.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HomePage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>BlogLayout<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>BlogPostsCell page<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BlogLayout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now if someone navigates to <a href=\"https://awesomeredwoodjsblog.com?page=2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://awesomeredwoodjsblog.com?page=2</a> (and the blog was actually hosted on awesomeredwoodjsblog.com), then <code class=\"language-text\">HomePage</code> would have its <code class=\"language-text\">page</code> prop set to <code class=\"language-text\">&quot;2&quot;</code>, and we then pass that value along to <code class=\"language-text\">BlogPostsCell</code>. If no <code class=\"language-text\">?page=</code> query parameter is provided <code class=\"language-text\">page</code> will default to <code class=\"language-text\">1</code></p>\n<p>Going back to <code class=\"language-text\">BlogPostsCell</code> there is one me thing to add before the query parameter work.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">beforeQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  page <span class=\"token operator\">=</span> page <span class=\"token operator\">?</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The query parameter is passed to the component as a string, so we need to parse it into a number.</p>\n<p>If you run the project with <code class=\"language-text\">yarn rw dev</code> on the default port 8910 you can now go to <a href=\"http://localhost:8910\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8910</a> and you should only see the first five posts. Change the URL to <a href=\"http://localhost:8910?page=2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8910?page=2</a> and you should see the next five posts (if you have that many, if you only have six posts total you should now see just one post).</p>\n<p>The final thing to add is a page selector, or pagination component, to the end of the list of posts to be able to click and jump between the different pages.</p>\n<p>Generate a new component with <code class=\"language-text\">yarn rw g component Pagination</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/Pagination/Pagination.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link<span class=\"token punctuation\">,</span> routes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@redwoodjs/router'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS_PER_PAGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Pagination</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">/</span> <span class=\"token constant\">POSTS_PER_PAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> page<span class=\"token operator\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Pagination<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Pagination</code></pre></div>\n<p>Keeping with the theme of the official RedwoodJS tutorial we're not adding any css, but if you wanted the pagination to look a little nicer it'd be easy to remove the bullets from that list, and make it horizontal instead of vertical.</p>\n<p>Finally let's add this new component to the end of <code class=\"language-text\">BlogPostsCell</code>. Don't forget to <code class=\"language-text\">import</code> it at the top as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// web/src/components/BlogPostsCell/BlogPostsCell.js</span>\n\n<span class=\"token keyword\">import</span> Pagination <span class=\"token keyword\">from</span> <span class=\"token string\">'src/components/Pagination'</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Success</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> postPage <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>postPage<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>BlogPost key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token operator\">&lt;</span>Pagination count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>postPage<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And there you have it! You have now added a functioning, but somewhat ugly, pagination to your redwood blog. One techincal limitation to the current implementation is that it doesn't handle too many pages very gracefully. Just imagine what that list of pages would look like if you had 100 pages! I'll write another blog post in the future with a more fully featured pagination component. </p>\n<p>Most of the code in this tutorial was copy/pasted from the <a href=\"https://github.com/redwoodjs/example-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"Hammer Blog\" RedwoodJS example</a></p>\n<p>If you want to learn more about pagination with Prisma and Apollo they both have excelent docs on the topic. <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/pagination\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/pagination</a> <a href=\"https://www.apollographql.com/docs/react/data/pagination/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.apollographql.com/docs/react/data/pagination/</a></p>","id":"07e4e2dd-7d47-5e82-ba05-e90ea4d6ad96","fields":{"slug":"/2020-09-16/redwood-pagination-tutorial/"},"frontmatter":{"date":"2020-09-15","title":"Redwood Pagination Tutorial","category":"RedwoodJS","tags":["RedwoodJS","GraphQL","Prisma","Coding","JavaScript"],"banner":"/assets/bg/5.jpg"},"timeToRead":5},"next":{"excerpt":"RedwoodJS ships with Apollo Client as its default GraphQL client. With the 0.22.0 release of Redwood it's now possible to use another GraphQL client if you want. The key is the new  component where you can plug in whatever  and  hooks you want, as…","html":"<p>RedwoodJS ships with Apollo Client as its default GraphQL client. With the 0.22.0 release of Redwood it's now possible to use another GraphQL client if you want. The key is the new <code class=\"language-text\">&lt;GraphQLHooksProvider&gt;</code> component where you can plug in whatever <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> hooks you want, as long as they have the correct function signature.</p>\n<p>By default when you create a new RedwoodJS app this is what you get in your <code class=\"language-text\">index.js</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FatalErrorBoundary</span></span> <span class=\"token attr-name\">page</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>FatalErrorPage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>netlifyIdentity<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>netlify<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RedwoodProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Routes</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RedwoodProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AuthProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FatalErrorBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redwood-app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The interesting bit is <code class=\"language-text\">&lt;RedwoodProvider&gt;</code>. Looking at the source for Redwood we see this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> RedwoodApolloProvider <span class=\"token keyword\">as</span> RedwoodProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/RedwoodApolloProvider'</span></code></pre></div>\n<p>and this:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  ApolloProvider<span class=\"token punctuation\">,</span>\n  ApolloClientOptions<span class=\"token punctuation\">,</span>\n  ApolloClient<span class=\"token punctuation\">,</span>\n  InMemoryCache<span class=\"token punctuation\">,</span>\n  useQuery<span class=\"token punctuation\">,</span>\n  useMutation<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n\n<span class=\"token comment\">// Other imports...</span>\n\n<span class=\"token keyword\">const</span> ApolloProviderWithFetchConfig<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FunctionComponent<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span>ApolloClientOptions<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InMemoryCache</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">, 'cache'>\n}> = ({ config = {}, children }) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> uri<span class=\"token punctuation\">,</span> headers <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetchConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    uri<span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApolloProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ApolloProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nexport const RedwoodApolloProvider: React.FunctionComponent&lt;</span><span class=\"token punctuation\">{</span>\n  graphQLClientConfig<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span>ApolloClientOptions<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InMemoryCache</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">, 'cache'>\n  useAuth: () => AuthContextInterface\n}> = ({ graphQLClientConfig, useAuth, children }) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FetchConfigProvider</span></span> <span class=\"token attr-name\">useAuth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useAuth<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApolloProviderWithFetchConfig</span></span> <span class=\"token attr-name\">config</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>graphQLClientConfig<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GraphQLHooksProvider</span></span> <span class=\"token attr-name\">useQuery</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useQuery<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">useMutation</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useMutation<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlashProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FlashProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">GraphQLHooksProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ApolloProviderWithFetchConfig</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FetchConfigProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So <code class=\"language-text\">&lt;RedwoodProvider&gt;</code> is a renamed export of <code class=\"language-text\">&lt;RedwoodApolloProvider&gt;</code> that wrapps the <code class=\"language-text\">&lt;ApolloProvider&gt;</code> context around its children, and passes <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> from <code class=\"language-text\">@apollo/client</code> to <code class=\"language-text\">&lt;GraphQLHooksProvider&gt;</code>.</p>\n<p>The new powerful thing is that we can remove <code class=\"language-text\">&lt;RedwoodProvider&gt;</code> from our code and do what it does on our own instead — and that gives us the ability to pass in other <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> hooks from some other GraphQL client. For Apollo Client it's super easy. (It's almost as if Redwood was built for usage with Apollo Client 😜) All you have to do is import <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> and pass them straight into <code class=\"language-text\">&lt;GraphQLHooksProvider&gt;</code>. For any other graphql client you are probably going to have to write some adapter code to make it all work.</p>\n<p>The other thing we need to do is to create our graphql client. And the client will need to know what headers to send and what url to talk to. For this we have the <code class=\"language-text\">useFetchConfig()</code> hook. Again, it's super straightforward to use with Apollo Client, but should be fairly easy to use with your client of choice as well.</p>\n<p>This is an example of how it can be done when wiring up <a href=\"https://github.com/nearform/graphql-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">graphql-hooks</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useQueryAdapter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useMutationAdapter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GraphqlHooksClientProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span> headers <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetchConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">,</span> headers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ClientContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ClientContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FatalErrorBoundary</span></span> <span class=\"token attr-name\">page</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>FatalErrorPage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>netlifyIdentity<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>netlify<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FetchConfigProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GraphqlHooksClientProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GraphQLHooksProvider</span></span>\n            <span class=\"token attr-name\">useQuery</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useQueryAdapter<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">useMutation</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>useMutationAdapter<span class=\"token punctuation\">}</span></span>\n          <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlashProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Routes</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FlashProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">GraphQLHooksProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">GraphqlHooksClientProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FetchConfigProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AuthProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FatalErrorBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redwood-app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The adaptors for the hooks are simple. Only change we had to do was to transform the graphql queries that come as GQL ASTs in to plain strings. We use the <code class=\"language-text\">print</code> function for this. Setting up the client using <code class=\"language-text\">useFetchConfig()</code> is also easy, just have to rename <code class=\"language-text\">uri</code> to <code class=\"language-text\">url</code> for graphql-hooks to be happy.</p>\n<p>You can see a full implementation in this GitHub repo: <a href=\"https://github.com/Tobbe/redwood-graphql-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Tobbe/redwood-graphql-hooks</a> (But there really isn't much more to it than what I've shown here.)</p>\n<p>So, why do we have to let Redwood know about our <code class=\"language-text\">useQuery</code> and <code class=\"language-text\">useMutation</code> hooks in the first place? <code class=\"language-text\">useQuery</code> is used internally by Redwood with Cells, in its <code class=\"language-text\">withCellHOC</code>. <code class=\"language-text\">useMutation</code> technically wouldn't be necessary. But having it there allows the generators to generate code that runs and is valid. Without it, generated code like this would never be valid: <code class=\"language-text\">import { useMutation, useFlash } from &#39;@redwoodjs/web&#39;</code>. (That line is from the <code class=\"language-text\">EditNameCell.js.template</code> file.)</p>\n<p><span style=\"font-size: 80%\">(Header photo by <a href=\"https://unsplash.com/@armand_khoury?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Armand Khoury</a> on <a href=\"https://unsplash.com/s/photos/graph?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</span></p>","id":"57518716-75f3-541a-8ed2-b9fdf700af32","fields":{"slug":"/2021-01-18/redwood-switch-to-another-graphql-client/"},"frontmatter":{"date":"2021-01-18","title":"Switching to Another GraphQL Client in RedwoodJS","category":"RedwoodJS","tags":["RedwoodJS","JavaScript","GraphQL","Apollo Client","graphql-hooks"],"banner":"/assets/bg/graph.jpg"},"timeToRead":4}}}}